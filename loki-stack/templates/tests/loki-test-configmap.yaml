{{- if (and .Values.test_pod.enabled .Values.loki.enabled) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "loki-stack.fullname" . }}-test
  labels:
    app: {{ template "loki-stack.name" . }}
    chart: {{ template "loki-stack.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  test.sh: |
    #!/usr/bin/env bash
    set -euo pipefail

    LOKI_HOST="${LOKI_SERVICE:-loki}"
    LOKI_PORT="${LOKI_PORT:-3100}"
    LOKI_URI="http://${LOKI_HOST}:${LOKI_PORT}"

    function setup() {
      echo "Waiting for Loki to become available..."
      apk add -q --no-cache curl jq
      until curl -s ${LOKI_URI}/loki/api/v1/labels | jq . >/dev/null; do
        sleep 1
      done
      echo "Loki is up!"
    }

    @test "Has 'app' label" {
      curl -s ${LOKI_URI}/loki/api/v1/labels | jq -e '.data[] | select(. == "app")'
    }

    @test "Query existing log" {
      curl -sG ${LOKI_URI}/loki/api/v1/query?limit=5 --data-urlencode 'query={app="sonarqube"}' | \
      jq -e '.data.result | length >= 0'
    }

    @test "Push and retrieve a test log" {
      local timestamp=$(date +%s%N)
      local data=$(jq -n --arg timestamp "${timestamp}" \
        '{"streams": [{"stream": {"app": "loki-test"}, "values": [[$timestamp, "test-log-entry"]]}]}')

      curl -s -X POST -H "Content-Type: application/json" \
        ${LOKI_URI}/loki/api/v1/push --data-raw "${data}"

      sleep 2

      curl -sG ${LOKI_URI}/loki/api/v1/query_range?limit=1 --data-urlencode 'query={app="loki-test"}' | \
      jq -e '.data.result[].values[][1] == "test-log-entry"'
    }
{{- end }}
